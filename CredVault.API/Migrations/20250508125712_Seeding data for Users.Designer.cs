// <auto-generated />
using System;
using CredVault.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CredVault.API.Migrations
{
    [DbContext(typeof(CredVaultDbContext))]
    [Migration("20250508125712_Seeding data for Users")]
    partial class SeedingdataforUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CredVault.API.Models.Domain.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsernameOrEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("CredVault.API.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("710b7450-60dc-475c-b783-4bcc094895c7"),
                            Email = "jason.lee@email.com",
                            Username = "jason.lee"
                        },
                        new
                        {
                            Id = new Guid("a818efb1-28a7-4df9-a655-8ca53ffaf420"),
                            Email = "samantha23@email.com",
                            Username = "samantha23"
                        },
                        new
                        {
                            Id = new Guid("58e1fd2b-e7b3-475f-a8a1-6f0412bd23c0"),
                            Email = "emma_writer@email.com",
                            Username = "emma_writer"
                        },
                        new
                        {
                            Id = new Guid("38aa6d36-5f9a-4925-a906-0d2c69193f40"),
                            Email = "mike.dev99@email.com",
                            Username = "mike.dev99"
                        },
                        new
                        {
                            Id = new Guid("968be66d-6c13-4f92-a9af-cac14c0f6cb4"),
                            Email = "mike.dev99@email.com",
                            Username = "mike.dev99"
                        });
                });

            modelBuilder.Entity("CredVault.API.Models.Domain.Credential", b =>
                {
                    b.HasOne("CredVault.API.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
